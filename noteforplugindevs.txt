Script Plugin System Development Documentation
This script implements a plugin system for a chat application. The plugin system allows for the addition of functionality through external Python scripts. Each plugin script must be placed in the ./plugins/ directory. The script will automatically load all valid Python scripts in this directory.

Functions
send_message(message)
This function sends a message to the server. The message is encoded as ASCII before being sent.

constantly_active()
This function creates an infinite loop. It does not perform any operations but can be used to keep a plugin continuously active.

load_plugin(file_path)
This function loads a plugin from a given file path. It uses the importlib.util module to dynamically import the plugin script. After importing the script, it checks if the script has the send_message and constantly_active functions. If these functions are not defined, they are added to the script with the default implementations defined in this script.

load_plugins_from_dir(directory)
This function loads all plugins from a given directory. It iterates over all files in the directory, checking if they are Python scripts (files ending with .py). If a file is a Python script, it attempts to load the script as a plugin using the load_plugin function. All loaded plugins are returned in a list.

Main Execution
The script starts by asking the user for their nickname and a join code. The join code is split into a host and port, which are used to establish a connection to the server.

The script attempts to connect to the server in an infinite loop until a connection is established. If the connection is refused, the script asks the user to enter the join code again.

Once connected, the script creates two threads: one for receiving messages and one for sending messages. These threads run in parallel, allowing the script to send and receive messages simultaneously.

Each plugin is also given the opportunity to modify incoming and outgoing messages. If a plugin defines an on_message_received function, this function is called whenever a message is received, and its return value is used as the new message. Similarly, if a plugin defines an on_message_sent function, this function is called before a message is sent, and its return value is used as the new message.

Creating a Plugin
To create a plugin, simply create a new Python script in the ./plugins/ directory. The script can define any functions it wishes, but it can also override the send_message, constantly_active, on_message_received, and on_message_sent functions to provide custom behavior.

Here is an example of a simple plugin that logs all received messages:

import logging

logging.basicConfig(filename='chat.log', level=logging.INFO)

def on_message_received(message):
   logging.info(f'Received message: {message}')
   return message
This plugin uses the logging module to log all received messages to a file named chat.log. The on_message_received function is overridden to add logging behavior. Note that the function returns the original message, so it does not alter the message itself.
